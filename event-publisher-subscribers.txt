// C# Events

1. Define a subclass EventsArgs for your event arguments.
example:
public class TextPublisherEventArgs : EventArgs
{
	public readonly string textMessage;
	
	public TextPublisherEventArgs(string text)
	{
		if(text != null)
		{
			textMessage = text;
		}
	}
}

2. Define a class for your event publisher.
example:
public class TextPublisher
{
	string textMessage = "Default Text.";
	
	public event EventHandler<TextPublisherEventArgs> EventSubscibers;
	
	protected virtual void OnTextPublish(object sender, TextPublisherEventArgs e)
	{
		EventSubscibers?.Invoke(this, e);
	}
	
	public string TextMessage
	{
		get { return textMessage; }
		
		set
		{
			if(value != null)
			{
				textMessage = value;
				var textPublisherEventArgs = new TextPublisherEventArgs(textMessage);
				OnTextPublish(this, textPublisherEventArgs );
			}
		}
	}
}


3. Define subscriber classes.
Example 1:
public class MailService
{
	public void OnTextPublish(object source, TextPublisherEventArgs e)
	{
		Console.WriteLine("MailService: Sending an email..." + e.textMessage);
		
	}
} 

Example 2;
public class MessageService
{
	public void OnTextPublish(object source, TextPublisherEventArgs e)
	{
		Console.WriteLine("MessageService: Sending an email..." + e.textMessage);
	}
}


4. Add defintions to the main program.
Example:
static void Main(string[] args)
{
	var textPublisher = new TextPublisher();
	var mailService = new MailService();
	var messageService = new MessageService();
	
	textPublisher.EventSubscibers += mailService;
	textPublisher.EventSubscibers += messageService;
	
	textPublisher.TextMessage = "Hello, World!";
	
	Console.WriteLine("Press any key to continue...");
	Console.ReadKey();
}

